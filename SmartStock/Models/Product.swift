import Foundation

struct ProductItem: Identifiable, Codable, Hashable, Equatable {
    var id: UUID
    var name: String
    var monthlySales: [String: Int]
    var predictedDemand: [String: Int]
    var emoji: String
    var unitPrice: Double
    var currency: Currency
    
    init(id: UUID = UUID(), name: String, monthlySales: [String: Int] = [:], unitPrice: Double = 0.0, currency: Currency = .usd) {
        self.id = id
        self.name = name
        self.monthlySales = monthlySales
        self.predictedDemand = [:]
        self.emoji = ProductItem.findEmoji(for: name)
        self.unitPrice = unitPrice
        self.currency = currency
    }
    
    private static let emojiDictionary: [String: String] = [
        // –§—Ä—É–∫—Ç–∏
        "apple": "üçé",
        "red apple": "üçé",
        "green apple": "üçè",
        "banana": "üçå",
        "orange": "üçä",
        "lemon": "üçã",
        "pear": "üçê",
        "peach": "üçë",
        "grapes": "üçá",
        "strawberry": "üçì",
        "blueberry": "ü´ê",
        "watermelon": "üçâ",
        "mango": "ü•≠",
        "pineapple": "üçç",
        "coconut": "ü••",
        "kiwi": "ü•ù",
        "tomato": "üçÖ",
        "avocado": "ü•ë",
        
        // –û–≤–æ—á—ñ
        "carrot": "ü•ï",
        "corn": "üåΩ",
        "cucumber": "ü•í",
        "broccoli": "ü•¶",
        "onion": "üßÖ",
        "garlic": "üßÑ",
        "potato": "ü•î",
        "pepper": "ü´ë",
        "eggplant": "üçÜ",
        "mushroom": "üçÑ",
        
        // –Ü–Ω—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
        "bread": "üçû",
        "milk": "ü•õ",
        "cheese": "üßÄ",
        "egg": "ü•ö",
        "meat": "ü•©",
        "chicken": "üçó",
        "fish": "üêü",
        "shrimp": "ü¶ê",
        "rice": "üçö",
        "noodles": "üçú",
        "pizza": "üçï",
        "hamburger": "üçî",
        "sandwich": "ü•™",
        "hotdog": "üå≠",
        "taco": "üåÆ",
        "sushi": "üç£",
        
        // –ù–∞–ø–æ—ó
        "coffee": "‚òïÔ∏è",
        "tea": "ü´ñ",
        "juice": "üßÉ",
        "water": "üíß",
        "beer": "üç∫",
        "wine": "üç∑",
        
        // –°–æ–ª–æ–¥–æ—â—ñ
        "candy": "üç¨",
        "chocolate": "üç´",
        "cookie": "üç™",
        "cake": "üç∞",
        "ice cream": "üç¶",
        "donut": "üç©"
    ]
    
    static func findEmoji(for name: String) -> String {
        let lowercaseName = name.lowercased().trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
        if let emoji = emojiDictionary[lowercaseName] {
            return emoji
        }
        
        // –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–µ
        for (key, emoji) in emojiDictionary {
            if lowercaseName.contains(key) || key.contains(lowercaseName) {
                return emoji
            }
        }
        
        // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –µ–º–æ–¥–∑—ñ
        return "üì¶"
    }
}

enum Currency: String, Codable, CaseIterable {
    case usd = "USD"
    case uah = "UAH"
    
    var symbol: String {
        switch self {
        case .usd: return "$"
        case .uah: return "‚Ç¥"
        }
    }
    
    var name: String {
        switch self {
        case .usd: return "US Dollar"
        case .uah: return "Ukrainian Hryvnia"
        }
    }
}

class ProductManager: ObservableObject {
    @Published var products: [ProductItem] = []
    private let saveKey = "savedProducts"
    private let hasInitializedKey = "hasInitializedProducts"
    
    init() {
        loadProducts()
        
        // –î–æ–¥–∞—î–º–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
        if UserDefaults.standard.bool(forKey: hasInitializedKey) == false {
            addDemoProducts()
            UserDefaults.standard.set(true, forKey: hasInitializedKey)
        }
    }
    
    func addProduct(_ product: ProductItem) {
        products.append(product)
        saveProducts()
    }
    
    func deleteProduct(_ product: ProductItem) {
        products.removeAll { $0.id == product.id }
        saveProducts()
    }
    
    func updateProduct(_ product: ProductItem) {
        if let index = products.firstIndex(where: { $0.id == product.id }) {
            products[index] = product
            saveProducts()
        }
    }
    
    private func addDemoProducts() {
        let months = ["January", "February", "March", "April", "May", "June", 
                     "July", "August", "September", "October", "November", "December"]
        
        // –î–µ–º–æ-—Ç–æ–≤–∞—Ä 1: –Ø–±–ª—É–∫–∞
        var appleSales: [String: Int] = [:]
        for (index, month) in months.enumerated() {
            // –ó–∏–º–æ—é —ñ –≤–æ—Å–µ–Ω–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂—ñ
            if index < 2 || index > 8 {
                appleSales[month] = Int.random(in: 500...800)
            } else {
                appleSales[month] = Int.random(in: 200...500)
            }
        }
        
        let apple = ProductItem(
            name: "Apples", 
            monthlySales: appleSales, 
            unitPrice: 1.25, 
            currency: .usd
        )
        
        // –î–µ–º–æ-—Ç–æ–≤–∞—Ä 2: –ë–∞–Ω–∞–Ω–∏
        var bananaSales: [String: Int] = [:]
        for month in months {
            bananaSales[month] = Int.random(in: 300...700)
        }
        
        let banana = ProductItem(
            name: "Bananas", 
            monthlySales: bananaSales, 
            unitPrice: 0.89, 
            currency: .usd
        )
        
        // –î–µ–º–æ-—Ç–æ–≤–∞—Ä 3: –ú–æ–ª–æ–∫–æ
        var milkSales: [String: Int] = [:]
        for month in months {
            milkSales[month] = Int.random(in: 800...1200)
        }
        
        let milk = ProductItem(
            name: "Milk", 
            monthlySales: milkSales, 
            unitPrice: 2.49, 
            currency: .usd
        )
        
        // –î–æ–¥–∞—î–º–æ –¥–µ–º–æ-—Ç–æ–≤–∞—Ä–∏
        products.append(apple)
        products.append(banana)
        products.append(milk)
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ UserDefaults
        saveProducts()
    }
    
    func predictDemand(for product: ProductItem) -> [String: Int] {
        // –ë–∞–∑–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è + 10% –¥–ª—è —Ä–æ—Å—Ç—É
        var predictions: [String: Int] = [:]
        let months = ["January", "February", "March", "April", "May", "June", 
                     "July", "August", "September", "October", "November", "December"]
        
        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É
        let totalSales = product.monthlySales.values.reduce(0, +)
        let averageSales = totalSales / max(product.monthlySales.count, 1)
        
        // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—ñ
        for month in months {
            if let historicalSales = product.monthlySales[month] {
                // –Ø–∫—â–æ —î —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –º—ñ—Å—è—Ü—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö —è–∫ –±–∞–∑—É
                predictions[month] = Int(Double(historicalSales) * 1.1) // +10% –¥–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
                predictions[month] = Int(Double(averageSales) * 1.1)
            }
        }
        
        return predictions
    }
    
    private func saveProducts() {
        if let encoded = try? JSONEncoder().encode(products) {
            UserDefaults.standard.set(encoded, forKey: saveKey)
        }
    }
    
    private func loadProducts() {
        if let data = UserDefaults.standard.data(forKey: saveKey),
           let decoded = try? JSONDecoder().decode([ProductItem].self, from: data) {
            products = decoded
        }
    }
} 